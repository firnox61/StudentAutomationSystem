@page "/auth/register"
@using System.ComponentModel.DataAnnotations
@using StudentAutomation.Blazor.Auth
@using StudentAutomation.Blazor.Services
@using StudentAutomation.Blazor.Models.Auth
@using SAAuth = StudentAutomation.Blazor.Models.Auth;
@inject IApiClient Api
@inject IJwtCookieAuthService AuthService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav

<div class="auth-wrapper d-flex align-items-center justify-content-center" style="min-height: 100vh;">
    <div class="card auth-card shadow-sm" style="min-width:380px;max-width:520px;width:100%;">
        <div class="card-body p-4">
            <h4 class="mb-1 text-center">Kayıt Ol</h4>
            <p class="text-muted text-center mb-4">Kısa formu doldur, başlayalım</p>

            @if (!string.IsNullOrEmpty(_error))
            {
                <div class="alert alert-danger" role="alert">@_error</div>
            }

            <EditForm Model="_model" OnValidSubmit="HandleRegisterAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Ad</label>
                        <InputText class="form-control" @bind-Value="_model.FirstName" />
                        <ValidationMessage For="@(() => _model.FirstName)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Soyad</label>
                        <InputText class="form-control" @bind-Value="_model.LastName" />
                        <ValidationMessage For="@(() => _model.LastName)" />
                    </div>
                </div>

                <div class="mt-3">
                    <label class="form-label">E-posta</label>
                    <InputText class="form-control" @bind-Value="_model.Email" autocomplete="email" />
                    <ValidationMessage For="@(() => _model.Email)" />
                </div>

                <div class="mt-3">
                    <label class="form-label">Şifre</label>
                    <InputText class="form-control" type="password" @bind-Value="_model.Password" autocomplete="new-password" />
                    <ValidationMessage For="@(() => _model.Password)" />
                </div>

                <div class="mt-3">
                    <label class="form-label">Şifre (Tekrar)</label>
                    <InputText class="form-control" type="password" @bind-Value="_model.PasswordConfirm" autocomplete="new-password" />
                    <ValidationMessage For="@(() => _model.PasswordConfirm)" />
                </div>

                <button class="btn btn-success w-100 mt-3" type="submit" disabled="@_busy">
                    @(_busy ? "Kayıt yapılıyor..." : "Kayıt Ol")
                </button>
            </EditForm>

            <div class="text-center mt-3">
                <a class="small text-muted" href="/auth/login">Hesabın var mı? Giriş yap</a>
            </div>
        </div>
    </div>
</div>

@code {
    // DTO'yu direkt kullanıyoruz (sayfa içi RegisterRequest sınıfı yok!)
    private readonly SAAuth.RegisterRequest _model = new();

    private string? _error;
    private bool _busy;

    private async Task HandleRegisterAsync()
    {
        _error = null;
        _busy = true;
        try
        {
            // 1) API'ye kayıt
            var ok = await Api.RegisterAsync(_model);
            if (!ok)
                throw new Exception("Kayıt başarısız.");

            // 2) Ardından login
            var tokenDto = await Api.LoginAsync(_model.Email, _model.Password);

            // 3) Cookie auth + sa.api_token
            await AuthService.SignInWithJwtAsync(tokenDto.Token, tokenDto.Expiration);

            // 4) UI'ı haberdar et
            if (AuthProvider is JwtCookieAuthStateProvider p) p.ForceRefresh();

            // 5) Yönlendir
            Nav.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }
}
